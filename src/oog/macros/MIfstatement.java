package oog.macros;/* This file was generated by SableCC's ObjectMacro. */

import java.util.LinkedList;
import java.util.List;
public class MIfstatement extends Macro {
    
    private DSeparator ExitSeparator;
    
    private DBeforeFirst ExitBeforeFirst;
    
    private DAfterLast ExitAfterLast;
    
    private DNone ExitNone;
    
    final List<String> list_Exit;
    
    final Context ExitContext = new Context();
    
    final StringValue ExitValue;
    
    private DSeparator NexteventSeparator;
    
    private DBeforeFirst NexteventBeforeFirst;
    
    private DAfterLast NexteventAfterLast;
    
    private DNone NexteventNone;
    
    final List<String> list_Nextevent;
    
    final Context NexteventContext = new Context();
    
    final StringValue NexteventValue;
    
    private DSeparator ModifiersSeparator;
    
    private DBeforeFirst ModifiersBeforeFirst;
    
    private DAfterLast ModifiersAfterLast;
    
    private DNone ModifiersNone;
    
    final List<Macro> list_Modifiers;
    
    final Context ModifiersContext = new Context();
    
    final MacroValue ModifiersValue;
    
    MIfstatement(Macros macros){
        
        this.setMacros(macros);
        this.list_Exit = new LinkedList<>();
        this.list_Nextevent = new LinkedList<>();
        this.list_Modifiers = new LinkedList<>();
        
        this.ExitValue = new StringValue(this.list_Exit, this.ExitContext);
        this.NexteventValue = new StringValue(this.list_Nextevent, this.NexteventContext);
        this.ModifiersValue = new MacroValue(this.list_Modifiers, this.ModifiersContext);
    }
    
    MIfstatement(String pExit, String pNextevent, List<Macro> pModifiers, Macros macros){
        
        this.setMacros(macros);
        this.list_Exit = new LinkedList<>();
        this.list_Nextevent = new LinkedList<>();
        this.list_Modifiers = new LinkedList<>();
        
        this.ExitValue = new StringValue(this.list_Exit, this.ExitContext);
        this.NexteventValue = new StringValue(this.list_Nextevent, this.NexteventContext);
        this.ModifiersValue = new MacroValue(this.list_Modifiers, this.ModifiersContext);
        if (pModifiers != null) {
            this.addAllModifiers(pModifiers);
        }
        
        if (pExit != null) {
            this.addExit(pExit);
        }
        if (pNextevent != null) {
            this.addNextevent(pNextevent);
        }
    }
    
    public void addAllExit(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Exit");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Exit");
            }
    
            this.list_Exit.add(string);
        }
    }
    
    public void addExit(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Exit");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Exit.add(string);
    }
    
    public void addAllNextevent(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Nextevent");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Nextevent");
            }
    
            this.list_Nextevent.add(string);
        }
    }
    
    public void addNextevent(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Nextevent");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Nextevent.add(string);
    }
    
    public void addAllModifiers(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Modifiers");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Modifiers");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeModifiers(macro);
            this.list_Modifiers.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeModifiers (Macro macro) {
        macro.apply(new InternalsInitializer("Modifiers"){
            @Override
            void setModifier(MModifier mModifier){
                
            
            
            }
        });
    }
    
    public void addModifiers(MModifier macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Modifiers");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Modifiers.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildExit() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Exit;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildNextevent() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Nextevent;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildModifiers() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.ModifiersContext;
        List<Macro> macros = this.list_Modifiers;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getExit() {
        return this.ExitValue;
    }
    
    StringValue getNextevent() {
        return this.NexteventValue;
    }
    
    MacroValue getModifiers() {
        return this.ModifiersValue;
    }
    
    private void initModifiersInternals(Context context) {
        for(Macro macro : this.list_Modifiers) {
            macro.apply(new InternalsInitializer("Modifiers"){
                @Override
                void setModifier(MModifier mModifier){
                    
                
                
                }
            });
        }
    }
    
    private void initExitDirectives() {
        
    }
    
    private void initNexteventDirectives() {
        
    }
    
    private void initModifiersDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setIfstatement(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initModifiersInternals(null);
        
        initExitDirectives();
        initNexteventDirectives();
        initModifiersDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("if(currentExit == ");
        sb0.append(buildExit());
        sb0.append(")");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    this.currentEvent = \"");
        sb0.append(buildNextevent());
        sb0.append("\";");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildModifiers());
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}