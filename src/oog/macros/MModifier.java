package oog.macros;/* This file was generated by SableCC's ObjectMacro. */

import java.util.LinkedList;
import java.util.List;
public class MModifier extends Macro {
    
    private DSeparator VariableSeparator;
    
    private DBeforeFirst VariableBeforeFirst;
    
    private DAfterLast VariableAfterLast;
    
    private DNone VariableNone;
    
    final List<String> list_Variable;
    
    final Context VariableContext = new Context();
    
    final StringValue VariableValue;
    
    private DSeparator ValueSeparator;
    
    private DBeforeFirst ValueBeforeFirst;
    
    private DAfterLast ValueAfterLast;
    
    private DNone ValueNone;
    
    final List<String> list_Value;
    
    final Context ValueContext = new Context();
    
    final StringValue ValueValue;
    
    private DSeparator OperatorSeparator;
    
    private DBeforeFirst OperatorBeforeFirst;
    
    private DAfterLast OperatorAfterLast;
    
    private DNone OperatorNone;
    
    final List<String> list_Operator;
    
    final Context OperatorContext = new Context();
    
    final StringValue OperatorValue;
    
    MModifier(Macros macros){
        
        this.setMacros(macros);
        this.list_Variable = new LinkedList<>();
        this.list_Value = new LinkedList<>();
        this.list_Operator = new LinkedList<>();
        
        this.VariableValue = new StringValue(this.list_Variable, this.VariableContext);
        this.ValueValue = new StringValue(this.list_Value, this.ValueContext);
        this.OperatorValue = new StringValue(this.list_Operator, this.OperatorContext);
    }
    
    MModifier(String pVariable, String pValue, String pOperator, Macros macros){
        
        this.setMacros(macros);
        this.list_Variable = new LinkedList<>();
        this.list_Value = new LinkedList<>();
        this.list_Operator = new LinkedList<>();
        
        this.VariableValue = new StringValue(this.list_Variable, this.VariableContext);
        this.ValueValue = new StringValue(this.list_Value, this.ValueContext);
        this.OperatorValue = new StringValue(this.list_Operator, this.OperatorContext);
        
        if (pVariable != null) {
            this.addVariable(pVariable);
        }
        if (pValue != null) {
            this.addValue(pValue);
        }
        if (pOperator != null) {
            this.addOperator(pOperator);
        }
    }
    
    public void addAllVariable(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Variable");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Variable");
            }
    
            this.list_Variable.add(string);
        }
    }
    
    public void addVariable(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Variable");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Variable.add(string);
    }
    
    public void addAllValue(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Value");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Value");
            }
    
            this.list_Value.add(string);
        }
    }
    
    public void addValue(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Value");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Value.add(string);
    }
    
    public void addAllOperator(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Operator");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Operator");
            }
    
            this.list_Operator.add(string);
        }
    }
    
    public void addOperator(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Operator");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Operator.add(string);
    }
    
    private String buildVariable() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Variable;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildValue() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Value;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildOperator() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Operator;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getVariable() {
        return this.VariableValue;
    }
    
    StringValue getValue() {
        return this.ValueValue;
    }
    
    StringValue getOperator() {
        return this.OperatorValue;
    }
    
    private void initVariableDirectives() {
        
    }
    
    private void initValueDirectives() {
        
    }
    
    private void initOperatorDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setModifier(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initVariableDirectives();
        initValueDirectives();
        initOperatorDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("if(this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\").get(1) ");
        sb0.append(buildOperator());
        sb0.append(" ");
        sb0.append(buildValue());
        sb0.append(" < this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\").get(0))");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("List<Integer> varInfo = this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("varInfo.set(1, varInfo.get(0));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.variables.replace(\"");
        sb0.append(buildVariable());
        sb0.append("\",  varInfo);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append("else if(this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\").get(1) ");
        sb0.append(buildOperator());
        sb0.append(" ");
        sb0.append(buildValue());
        sb0.append(" > this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\").get(2))");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("List<Integer> varInfo = this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("varInfo.set(1, varInfo.get(2));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.variables.replace(\"");
        sb0.append(buildVariable());
        sb0.append("\",  varInfo);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append("else");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("List<Integer> varInfo = this.variables.get(\"");
        sb0.append(buildVariable());
        sb0.append("\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("varInfo.set(1, varInfo.get(1) ");
        sb0.append(buildOperator());
        sb0.append(" ");
        sb0.append(buildValue());
        sb0.append(" );");
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.variables.replace(\"");
        sb0.append(buildVariable());
        sb0.append("\",  varInfo);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}