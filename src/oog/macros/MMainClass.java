package oog.macros;/* This file was generated by SableCC's ObjectMacro. */

import java.util.LinkedList;
import java.util.List;
public class MMainClass extends Macro {
    
    private DSeparator VarSeparator;
    
    private DBeforeFirst VarBeforeFirst;
    
    private DAfterLast VarAfterLast;
    
    private DNone VarNone;
    
    final List<Macro> list_Var;
    
    final Context VarContext = new Context();
    
    final MacroValue VarValue;
    
    private DSeparator StmSeparator;
    
    private DBeforeFirst StmBeforeFirst;
    
    private DAfterLast StmAfterLast;
    
    private DNone StmNone;
    
    final List<Macro> list_Stm;
    
    final Context StmContext = new Context();
    
    final MacroValue StmValue;
    
    MMainClass(Macros macros){
        
        this.setMacros(macros);
        this.list_Var = new LinkedList<>();
        this.list_Stm = new LinkedList<>();
        
        this.VarValue = new MacroValue(this.list_Var, this.VarContext);
        this.StmValue = new MacroValue(this.list_Stm, this.StmContext);
    }
    
    MMainClass(List<Macro> pVar, List<Macro> pStm, Macros macros){
        
        this.setMacros(macros);
        this.list_Var = new LinkedList<>();
        this.list_Stm = new LinkedList<>();
        
        this.VarValue = new MacroValue(this.list_Var, this.VarContext);
        this.StmValue = new MacroValue(this.list_Stm, this.StmContext);
        if (pVar != null) {
            this.addAllVar(pVar);
        }
        if (pStm != null) {
            this.addAllStm(pStm);
        }
    }
    
    public void addAllVar(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Var");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Var");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeVar(macro);
            this.list_Var.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeVar (Macro macro) {
        macro.apply(new InternalsInitializer("Var"){
            @Override
            void setVariable(MVariable mVariable){
                
            
            
            }
        });
    }
    
    public void addVar(MVariable macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Var");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Var.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllStm(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Stm");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Stm");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeStm(macro);
            this.list_Stm.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeStm (Macro macro) {
        macro.apply(new InternalsInitializer("Stm"){
            @Override
            void setEventif(MEventif mEventif){
                
            
            
            }
        });
    }
    
    public void addStm(MEventif macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Stm");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Stm.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildVar() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.VarContext;
        List<Macro> macros = this.list_Var;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildStm() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.StmContext;
        List<Macro> macros = this.list_Stm;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    MacroValue getVar() {
        return this.VarValue;
    }
    
    MacroValue getStm() {
        return this.StmValue;
    }
    
    private void initVarInternals(Context context) {
        for(Macro macro : this.list_Var) {
            macro.apply(new InternalsInitializer("Var"){
                @Override
                void setVariable(MVariable mVariable){
                    
                
                
                }
            });
        }
    }
    
    private void initStmInternals(Context context) {
        for(Macro macro : this.list_Stm) {
            macro.apply(new InternalsInitializer("Stm"){
                @Override
                void setEventif(MEventif mEventif){
                    
                
                
                }
            });
        }
    }
    
    private void initVarDirectives() {
        
    }
    
    private void initStmDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setMainClass(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initVarInternals(null);
        initStmInternals(null);
        
        initVarDirectives();
        initStmDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("package oog;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("import java.io.*;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("import java.util.*;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("public class Main ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    String currentEvent = \"\";");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int currentExit = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    Map<String, List<Integer>> variables = new HashMap<>();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    Map<String, Map<String, String>> events;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    public int executeChoiceEvent(Map<String, String> event)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.console().flush();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(event.get(\"backGround\"));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(event.get(\"character\"));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(event.get(\"test\"));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        for (Map.Entry<String, String> entry : event.entrySet()) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(entry.getKey().contains(\"choice__\"))");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                System.out.println(entry.getKey() + \" : \" + entry.getValue());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(\"Your choice: \");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return Integer.parseInt(System.console().readLine());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    public int executeEndEvent(Map<String, String> event)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.console().flush();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(event.get(\"background\"));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(event.get(\"character\"));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(event.get(\"text\"));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return -1;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    public int executeEvent()");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        Map<String, String> event = events.get(currentEvent);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(Objects.equals(event.get(\"type\"), \"choice\"))");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            return executeChoiceEvent(event);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }else if(Objects.equals(event.get(\"type\"), \"end\"))");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            return executeEndEvent(event);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }else");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            System.out.println(\"event type not implemented\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return -2;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    public static void main(String[] args) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        Main oog = new Main();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        oog.run();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    public void run() ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildVar());
        sb0.append(LINE_SEPARATOR);
        sb0.append("    try");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    FileInputStream fis = new FileInputStream(\"events.ser\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ObjectInputStream ois = new ObjectInputStream(fis);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    events = (Map<String, Map<String, String>>) ois.readObject();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ois.close();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }catch(FileNotFoundException e)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(e);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }catch(IOException e)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(e);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }catch(ClassNotFoundException e)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        System.out.println(e);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    for(String key: events.keySet())");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(key.contains(\"first__\"))");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("           currentEvent = key;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    while(true)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        currentExit = executeEvent();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(false)");
        sb0.append("{");
        sb0.append("}");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildStm());
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}