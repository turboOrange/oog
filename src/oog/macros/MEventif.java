package oog.macros;/* This file was generated by SableCC's ObjectMacro. */

import java.util.LinkedList;
import java.util.List;
public class MEventif extends Macro {
    
    private DSeparator StmSeparator;
    
    private DBeforeFirst StmBeforeFirst;
    
    private DAfterLast StmAfterLast;
    
    private DNone StmNone;
    
    final List<Macro> list_Stm;
    
    final Context StmContext = new Context();
    
    final MacroValue StmValue;
    
    private DSeparator CurrenteventSeparator;
    
    private DBeforeFirst CurrenteventBeforeFirst;
    
    private DAfterLast CurrenteventAfterLast;
    
    private DNone CurrenteventNone;
    
    final List<String> list_Currentevent;
    
    final Context CurrenteventContext = new Context();
    
    final StringValue CurrenteventValue;
    
    MEventif(Macros macros){
        
        this.setMacros(macros);
        this.list_Stm = new LinkedList<>();
        this.list_Currentevent = new LinkedList<>();
        
        this.StmValue = new MacroValue(this.list_Stm, this.StmContext);
        this.CurrenteventValue = new StringValue(this.list_Currentevent, this.CurrenteventContext);
    }
    
    MEventif(List<Macro> pStm, String pCurrentevent, Macros macros){
        
        this.setMacros(macros);
        this.list_Stm = new LinkedList<>();
        this.list_Currentevent = new LinkedList<>();
        
        this.StmValue = new MacroValue(this.list_Stm, this.StmContext);
        this.CurrenteventValue = new StringValue(this.list_Currentevent, this.CurrenteventContext);
        if (pStm != null) {
            this.addAllStm(pStm);
        }
        
        if (pCurrentevent != null) {
            this.addCurrentevent(pCurrentevent);
        }
    }
    
    public void addAllStm(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Stm");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Stm");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeStm(macro);
            this.list_Stm.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeStm (Macro macro) {
        macro.apply(new InternalsInitializer("Stm"){
            @Override
            void setIfstatement(MIfstatement mIfstatement){
                
            
            
            }
        });
    }
    
    public void addStm(MIfstatement macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Stm");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Stm.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllCurrentevent(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Currentevent");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Currentevent");
            }
    
            this.list_Currentevent.add(string);
        }
    }
    
    public void addCurrentevent(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Currentevent");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Currentevent.add(string);
    }
    
    private String buildStm() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.StmContext;
        List<Macro> macros = this.list_Stm;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildCurrentevent() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Currentevent;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    MacroValue getStm() {
        return this.StmValue;
    }
    
    StringValue getCurrentevent() {
        return this.CurrenteventValue;
    }
    
    private void initStmInternals(Context context) {
        for(Macro macro : this.list_Stm) {
            macro.apply(new InternalsInitializer("Stm"){
                @Override
                void setIfstatement(MIfstatement mIfstatement){
                    
                
                
                }
            });
        }
    }
    
    private void initStmDirectives() {
        
    }
    
    private void initCurrenteventDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setEventif(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initStmInternals(null);
        
        initStmDirectives();
        initCurrenteventDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("else if(\"");
        sb0.append(buildCurrentevent());
        sb0.append("\" == this.currentEvent)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildStm());
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(currentExit == -1)");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}