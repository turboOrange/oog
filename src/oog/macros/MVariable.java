package oog.macros;/* This file was generated by SableCC's ObjectMacro. */

import java.util.LinkedList;
import java.util.List;
public class MVariable extends Macro {
    
    private DSeparator MinSeparator;
    
    private DBeforeFirst MinBeforeFirst;
    
    private DAfterLast MinAfterLast;
    
    private DNone MinNone;
    
    final List<String> list_Min;
    
    final Context MinContext = new Context();
    
    final StringValue MinValue;
    
    private DSeparator MaxSeparator;
    
    private DBeforeFirst MaxBeforeFirst;
    
    private DAfterLast MaxAfterLast;
    
    private DNone MaxNone;
    
    final List<String> list_Max;
    
    final Context MaxContext = new Context();
    
    final StringValue MaxValue;
    
    private DSeparator DefSeparator;
    
    private DBeforeFirst DefBeforeFirst;
    
    private DAfterLast DefAfterLast;
    
    private DNone DefNone;
    
    final List<String> list_Def;
    
    final Context DefContext = new Context();
    
    final StringValue DefValue;
    
    private DSeparator VisibleSeparator;
    
    private DBeforeFirst VisibleBeforeFirst;
    
    private DAfterLast VisibleAfterLast;
    
    private DNone VisibleNone;
    
    final List<String> list_Visible;
    
    final Context VisibleContext = new Context();
    
    final StringValue VisibleValue;
    
    private DSeparator NameSeparator;
    
    private DBeforeFirst NameBeforeFirst;
    
    private DAfterLast NameAfterLast;
    
    private DNone NameNone;
    
    final List<String> list_Name;
    
    final Context NameContext = new Context();
    
    final StringValue NameValue;
    
    MVariable(Macros macros){
        
        this.setMacros(macros);
        this.list_Min = new LinkedList<>();
        this.list_Max = new LinkedList<>();
        this.list_Def = new LinkedList<>();
        this.list_Visible = new LinkedList<>();
        this.list_Name = new LinkedList<>();
        
        this.MinValue = new StringValue(this.list_Min, this.MinContext);
        this.MaxValue = new StringValue(this.list_Max, this.MaxContext);
        this.DefValue = new StringValue(this.list_Def, this.DefContext);
        this.VisibleValue = new StringValue(this.list_Visible, this.VisibleContext);
        this.NameValue = new StringValue(this.list_Name, this.NameContext);
    }
    
    MVariable(String pMin, String pMax, String pDef, String pVisible, String pName, Macros macros){
        
        this.setMacros(macros);
        this.list_Min = new LinkedList<>();
        this.list_Max = new LinkedList<>();
        this.list_Def = new LinkedList<>();
        this.list_Visible = new LinkedList<>();
        this.list_Name = new LinkedList<>();
        
        this.MinValue = new StringValue(this.list_Min, this.MinContext);
        this.MaxValue = new StringValue(this.list_Max, this.MaxContext);
        this.DefValue = new StringValue(this.list_Def, this.DefContext);
        this.VisibleValue = new StringValue(this.list_Visible, this.VisibleContext);
        this.NameValue = new StringValue(this.list_Name, this.NameContext);
        
        if (pMin != null) {
            this.addMin(pMin);
        }
        if (pMax != null) {
            this.addMax(pMax);
        }
        if (pDef != null) {
            this.addDef(pDef);
        }
        if (pVisible != null) {
            this.addVisible(pVisible);
        }
        if (pName != null) {
            this.addName(pName);
        }
    }
    
    public void addAllMin(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Min");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Min");
            }
    
            this.list_Min.add(string);
        }
    }
    
    public void addMin(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Min");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Min.add(string);
    }
    
    public void addAllMax(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Max");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Max");
            }
    
            this.list_Max.add(string);
        }
    }
    
    public void addMax(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Max");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Max.add(string);
    }
    
    public void addAllDef(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Def");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Def");
            }
    
            this.list_Def.add(string);
        }
    }
    
    public void addDef(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Def");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Def.add(string);
    }
    
    public void addAllVisible(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Visible");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Visible");
            }
    
            this.list_Visible.add(string);
        }
    }
    
    public void addVisible(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Visible");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Visible.add(string);
    }
    
    public void addAllName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Name");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Name");
            }
    
            this.list_Name.add(string);
        }
    }
    
    public void addName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Name");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Name.add(string);
    }
    
    private String buildMin() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Min;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildMax() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Max;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildDef() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Def;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildVisible() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Visible;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildName() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Name;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getMin() {
        return this.MinValue;
    }
    
    StringValue getMax() {
        return this.MaxValue;
    }
    
    StringValue getDef() {
        return this.DefValue;
    }
    
    StringValue getVisible() {
        return this.VisibleValue;
    }
    
    StringValue getName() {
        return this.NameValue;
    }
    
    private void initMinDirectives() {
        
    }
    
    private void initMaxDirectives() {
        
    }
    
    private void initDefDirectives() {
        
    }
    
    private void initVisibleDirectives() {
        
    }
    
    private void initNameDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setVariable(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initMinDirectives();
        initMaxDirectives();
        initDefDirectives();
        initVisibleDirectives();
        initNameDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("variables.put(\"");
        sb0.append(buildName());
        sb0.append("\", new ArrayList<>());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("variables.get(\"");
        sb0.append(buildName());
        sb0.append("\").addAll(Arrays.asList(");
        sb0.append(buildMin());
        sb0.append(", ");
        sb0.append(buildDef());
        sb0.append(", ");
        sb0.append(buildMax());
        sb0.append(", ");
        sb0.append(buildVisible());
        sb0.append("));");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}