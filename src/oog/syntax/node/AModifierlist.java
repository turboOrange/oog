/* This file was generated by SableCC (http://www.sablecc.org/). */

package oog.syntax.node;

import java.util.*;
import oog.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AModifierlist extends PModifierlist
{
    private TLSqPar _lSqPar_;
    private final LinkedList<PModifier> _modifiers_ = new LinkedList<PModifier>();
    private TRSqPar _rSqPar_;

    public AModifierlist()
    {
        // Constructor
    }

    public AModifierlist(
        @SuppressWarnings("hiding") TLSqPar _lSqPar_,
        @SuppressWarnings("hiding") List<?> _modifiers_,
        @SuppressWarnings("hiding") TRSqPar _rSqPar_)
    {
        // Constructor
        setLSqPar(_lSqPar_);

        setModifiers(_modifiers_);

        setRSqPar(_rSqPar_);

    }

    @Override
    public Object clone()
    {
        return new AModifierlist(
            cloneNode(this._lSqPar_),
            cloneList(this._modifiers_),
            cloneNode(this._rSqPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModifierlist(this);
    }

    public TLSqPar getLSqPar()
    {
        return this._lSqPar_;
    }

    public void setLSqPar(TLSqPar node)
    {
        if(this._lSqPar_ != null)
        {
            this._lSqPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lSqPar_ = node;
    }

    public LinkedList<PModifier> getModifiers()
    {
        return this._modifiers_;
    }

    public void setModifiers(List<?> list)
    {
        for(PModifier e : this._modifiers_)
        {
            e.parent(null);
        }
        this._modifiers_.clear();

        for(Object obj_e : list)
        {
            PModifier e = (PModifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._modifiers_.add(e);
        }
    }

    public TRSqPar getRSqPar()
    {
        return this._rSqPar_;
    }

    public void setRSqPar(TRSqPar node)
    {
        if(this._rSqPar_ != null)
        {
            this._rSqPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rSqPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lSqPar_)
            + toString(this._modifiers_)
            + toString(this._rSqPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lSqPar_ == child)
        {
            this._lSqPar_ = null;
            return;
        }

        if(this._modifiers_.remove(child))
        {
            return;
        }

        if(this._rSqPar_ == child)
        {
            this._rSqPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lSqPar_ == oldChild)
        {
            setLSqPar((TLSqPar) newChild);
            return;
        }

        for(ListIterator<PModifier> i = this._modifiers_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rSqPar_ == oldChild)
        {
            setRSqPar((TRSqPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
