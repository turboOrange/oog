/* This file was generated by SableCC (http://www.sablecc.org/). */

package oog.syntax.node;

import oog.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AExitstm extends PExitstm
{
    private TExit _exit_;
    private TNum _num_;
    private TArrow _arrow_;
    private TIdent _ident_;
    private PModifierlist _modifierlist_;

    public AExitstm()
    {
        // Constructor
    }

    public AExitstm(
        @SuppressWarnings("hiding") TExit _exit_,
        @SuppressWarnings("hiding") TNum _num_,
        @SuppressWarnings("hiding") TArrow _arrow_,
        @SuppressWarnings("hiding") TIdent _ident_,
        @SuppressWarnings("hiding") PModifierlist _modifierlist_)
    {
        // Constructor
        setExit(_exit_);

        setNum(_num_);

        setArrow(_arrow_);

        setIdent(_ident_);

        setModifierlist(_modifierlist_);

    }

    @Override
    public Object clone()
    {
        return new AExitstm(
            cloneNode(this._exit_),
            cloneNode(this._num_),
            cloneNode(this._arrow_),
            cloneNode(this._ident_),
            cloneNode(this._modifierlist_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExitstm(this);
    }

    public TExit getExit()
    {
        return this._exit_;
    }

    public void setExit(TExit node)
    {
        if(this._exit_ != null)
        {
            this._exit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exit_ = node;
    }

    public TNum getNum()
    {
        return this._num_;
    }

    public void setNum(TNum node)
    {
        if(this._num_ != null)
        {
            this._num_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._num_ = node;
    }

    public TArrow getArrow()
    {
        return this._arrow_;
    }

    public void setArrow(TArrow node)
    {
        if(this._arrow_ != null)
        {
            this._arrow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arrow_ = node;
    }

    public TIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(TIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public PModifierlist getModifierlist()
    {
        return this._modifierlist_;
    }

    public void setModifierlist(PModifierlist node)
    {
        if(this._modifierlist_ != null)
        {
            this._modifierlist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifierlist_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exit_)
            + toString(this._num_)
            + toString(this._arrow_)
            + toString(this._ident_)
            + toString(this._modifierlist_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exit_ == child)
        {
            this._exit_ = null;
            return;
        }

        if(this._num_ == child)
        {
            this._num_ = null;
            return;
        }

        if(this._arrow_ == child)
        {
            this._arrow_ = null;
            return;
        }

        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._modifierlist_ == child)
        {
            this._modifierlist_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exit_ == oldChild)
        {
            setExit((TExit) newChild);
            return;
        }

        if(this._num_ == oldChild)
        {
            setNum((TNum) newChild);
            return;
        }

        if(this._arrow_ == oldChild)
        {
            setArrow((TArrow) newChild);
            return;
        }

        if(this._ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        if(this._modifierlist_ == oldChild)
        {
            setModifierlist((PModifierlist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
