/* This file was generated by SableCC (http://www.sablecc.org/). */

package oog.syntax.analysis;

import java.util.*;
import oog.syntax.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariabledef(AVariabledef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEventdef(AEventdef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExitlist(AExitlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExitstm(AExitstm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModifierlist(AModifierlist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusModifier(APlusModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusModifier(AMinusModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualModifier(AEqualModifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLSqPar(TLSqPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRSqPar(TRSqPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotDot(TDotDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExit(TExit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEvent(TEvent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVisibility(TVisibility node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdent(TIdent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
