/* This file was generated by SableCC (http://www.sablecc.org/). */

package event.syntax.node;

import event.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AIndirectAssosiation extends PAssosiation
{
    private TIdent _ident_;
    private TDotDot _dotDot_;
    private TFile _file_;
    private TString _string_;

    public AIndirectAssosiation()
    {
        // Constructor
    }

    public AIndirectAssosiation(
        @SuppressWarnings("hiding") TIdent _ident_,
        @SuppressWarnings("hiding") TDotDot _dotDot_,
        @SuppressWarnings("hiding") TFile _file_,
        @SuppressWarnings("hiding") TString _string_)
    {
        // Constructor
        setIdent(_ident_);

        setDotDot(_dotDot_);

        setFile(_file_);

        setString(_string_);

    }

    @Override
    public Object clone()
    {
        return new AIndirectAssosiation(
            cloneNode(this._ident_),
            cloneNode(this._dotDot_),
            cloneNode(this._file_),
            cloneNode(this._string_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndirectAssosiation(this);
    }

    public TIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(TIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public TDotDot getDotDot()
    {
        return this._dotDot_;
    }

    public void setDotDot(TDotDot node)
    {
        if(this._dotDot_ != null)
        {
            this._dotDot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dotDot_ = node;
    }

    public TFile getFile()
    {
        return this._file_;
    }

    public void setFile(TFile node)
    {
        if(this._file_ != null)
        {
            this._file_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._file_ = node;
    }

    public TString getString()
    {
        return this._string_;
    }

    public void setString(TString node)
    {
        if(this._string_ != null)
        {
            this._string_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._string_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ident_)
            + toString(this._dotDot_)
            + toString(this._file_)
            + toString(this._string_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._dotDot_ == child)
        {
            this._dotDot_ = null;
            return;
        }

        if(this._file_ == child)
        {
            this._file_ = null;
            return;
        }

        if(this._string_ == child)
        {
            this._string_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        if(this._dotDot_ == oldChild)
        {
            setDotDot((TDotDot) newChild);
            return;
        }

        if(this._file_ == oldChild)
        {
            setFile((TFile) newChild);
            return;
        }

        if(this._string_ == oldChild)
        {
            setString((TString) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
